---
description: 
globs: 
alwaysApply: false
---
---
description: NestJS backend rules for a modular, maintainable, and testable backend using TypeScript, Prisma, and Supabase.
globs:
  - "src/**/*.module.ts"
  - "src/**/*.controller.ts"
  - "src/**/*.service.ts"
  - "src/**/*.dto.ts"
  - "src/**/*.entity.ts"
  - "prisma/schema.prisma"
alwaysApply: false
---

# üõ†Ô∏è NestJS Backend Rules

## üß± Architecture

- **Modular Structure**:
  - Create one feature module per domain.
  - Organize files within `controllers/`, `services/`, `dto/`, `entities/`, and `tests/` folders per module.
- **Core Module**:
  - Centralize global configuration (e.g. interceptors, filters, logging, middleware, guards).
- **Shared Module**:
  - Use for utilities and providers reused across modules (e.g. logger, mailer, guards).
- **Single Responsibility**:
  - Controllers handle routing and delegation.
  - Services contain business logic.
  - DTOs define input shapes and validation.

## üßæ Naming & Structure

- **DTO Naming**: `CreateXDto`, `UpdateXDto`, `AuthRequestDto`
- **Exports**: One export per file
- **Naming for Boolean Variables**: Use verbs (e.g., `isActive`, `canEdit`, `hasRole`)

## ‚ú® Code Quality

- **Avoid `any`**; use `unknown` with proper type guards if needed.
- **Use `readonly` or `as const`** for immutable values.
- **Don't nest deeply** ‚Äî prefer early returns and utility extraction.
- **Use dependency injection** over static access or singletons.
- **Use interfaces** for business logic contracts, not just for DTOs.

## ‚úÖ Data Validation

- Use `class-validator` decorators in DTOs.
- Validate all external inputs (REST, CLI, cron jobs).
- Define strict DTO schemas for each controller action.

## üßØ Error Handling

- Use `HttpException` or `RpcException` in services when appropriate.
- Avoid leaking raw error messages ‚Äî wrap and rethrow with context.
- Use global filters for logging and transforming unhandled exceptions.
- Use guards for auth-related pre-checks and permissions.

## üîê Security

- Validate JWTs using `PassportModule` with appropriate guards.
- Use role-based access control via custom decorators + guards.
- Never trust frontend input ‚Äî validate everything.
- Store secrets in `.env` and access using `ConfigService`.

## üîç Observability

- Use middleware or interceptors for request/response logging.
- Add timestamps and correlation IDs to logs.
- Use structured logging (e.g., pino, Winston).
- Add smoke-test methods (`GET /health` or `/admin/test`) to all main controllers.

---

By following these backend-specific rules, your NestJS codebase will be clean, modular, testable, and ready to scale while fitting seamlessly alongside your global and frontend rules.
